{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","api.ts","components/Loader/Loader.tsx","components/TodoList/TodoHead.tsx","app/hooks.ts","components/TodoList/TodoItem.tsx","components/TodoList/TodoList.tsx","utils/filterBy.ts","components/TodoFilter/TodoFilter.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","defaultState","query","status","filterReducer","setTodo","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","className","TodoHead","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoItem","dispatch","classNames","completed","id","title","onClick","TodoList","useState","list","setList","isProcesing","setIsProcesing","useEffect","response","finally","todoList","item","toLowerCase","includes","trim","filterBy","length","map","TodoFilter","handleChangeQuery","value","filterActions","onSubmit","event","preventDefault","onChange","e","target","option","placeholder","style","pointerEvents","TodoModal","currentUser","setCurrentUser","isProcessing","removeTodo","userId","href","email","name","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.30a95ef4.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQuery = {\n  type: 'query/SET',\n  payload: string,\n};\n\ntype SetStatus = {\n  type: 'status/SET',\n  payload: Status,\n};\n\nconst defaultState = {\n  query: '',\n  status: 'All' as Status,\n};\n\nconst setStatus = (status: Status): SetStatus => ({\n  type: 'status/SET',\n  payload: status,\n});\n\nconst setQuery = (query: string): SetQuery => ({\n  type: 'query/SET',\n  payload: query,\n});\n\nexport const actions = { setQuery, setStatus };\n\ntype Actions = SetQuery | SetStatus;\n\nconst filterReducer = (\n  state = defaultState,\n  action: Actions,\n) => {\n  switch (action.type) {\n    case 'query/SET':\n      return { ...state, query: action.payload };\n\n    case 'status/SET':\n      return { ...state, status: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodos = {\n  type: 'todos/set',\n  payload: Todo[],\n};\n\nexport const setTodo\n= (todos: Todo[]): SetTodos => ({ type: 'todos/set', payload: todos });\n\nexport const actions = { setTodo };\n\nconst todosReducer = (\n  state: Todo[] = [],\n  action: SetTodos,\n): Todo[] => {\n  return action.type === 'todos/set' ? action.payload : state;\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export const TodoHead = () => (\n  <thead>\n    <tr>\n      <th>#</th>\n\n      <th>\n        <span className=\"icon\">\n          <i className=\"fas fa-check\" />\n        </span>\n      </th>\n\n      <th>Title</th>\n      <th> </th>\n    </tr>\n  </thead>\n);\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { actions } from '../../features/currentTodo';\nimport { useAppDispatch } from '../../app/hooks';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoItem:React.FC<Props> = ({ todo }) => {\n  const dispatch = useAppDispatch();\n  const { setTodo } = actions;\n\n  const handleSelectCurrentTodo = () => {\n    dispatch(setTodo(todo));\n  };\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      className={classNames({\n        'has-background-info-light': todo.completed,\n      })}\n    >\n      <td className=\"is-vcentered\">{todo.id}</td>\n      <td className=\"is-vcentered\">\n        {todo.completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n\n      <td className=\"is-vcentered is-expanded\">\n        <p className={classNames({\n          'has-text-danger': !todo.completed,\n          'has-text-success': todo.completed,\n        })}\n        >\n          {todo.title}\n\n        </p>\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={handleSelectCurrentTodo}\n        >\n          <span className=\"icon\">\n            <i className=\"far fa-eye\" />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { getTodos } from '../../api';\nimport { Loader } from '../Loader/Loader';\nimport { TodoHead } from './TodoHead';\nimport { TodoItem } from './TodoItem';\nimport { Todo } from '../../types/Todo';\nimport { filterBy } from '../../utils/filterBy';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { setTodo } from '../../features/todos';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const query = useAppSelector(state => state.filter.query);\n  const status = useAppSelector(state => state.filter.status);\n  const todos = useAppSelector(state => state.todos);\n  const [list, setList] = useState<Todo[]>([]);\n  const [isProcesing, setIsProcesing] = useState(false);\n\n  useEffect(() => {\n    setIsProcesing(true);\n    getTodos()\n      .then(response => {\n        setList(response);\n        dispatch(setTodo(response));\n      })\n      .finally(() => setIsProcesing(false));\n  }, []);\n\n  useEffect(() => {\n    dispatch(setTodo(filterBy(list, query, status)));\n  }, [query, status]);\n\n  return (\n    <>\n      {isProcesing && <Loader />}\n      {list.length > 0 && !todos.length && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      <table className=\"table is-narrow is-fullwidth\">\n        {(todos.length > 0) && (\n          <TodoHead />\n        )}\n\n        <tbody>\n          {todos.map(todo => (\n            <TodoItem\n              todo={todo}\n              key={todo.id}\n            />\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import { Todo } from '../types/Todo';\nimport { Status } from '../types/Status';\n\nexport const filterBy = (todoList: Todo[], query: string, status: Status) => {\n  let list = todoList;\n\n  list = list.filter(item => item.title\n    .toLowerCase().includes(query.toLowerCase().trim()));\n\n  switch (status) {\n    case 'active':\n      list = list.filter(item => !item.completed);\n      break;\n    case 'completed':\n      list = list.filter(item => item.completed);\n      break;\n\n    default:\n      break;\n  }\n\n  return list;\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const query = useAppSelector(state => state.filter.query);\n  const status = useAppSelector(state => state.filter.status);\n  const options = ['all', 'active', 'completed'];\n\n  const handleChangeStaus = (value: Status) => {\n    dispatch(\n      filterActions.setStatus(value),\n    );\n  };\n\n  const handleChangeQuery = (value = '') => {\n    dispatch(\n      filterActions.setQuery(value),\n    );\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={(e) => handleChangeStaus(e.target.value as Status)}\n          >\n            {options.map(option => (\n              <option value={option} key={option}>{option}</option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(e) => handleChangeQuery(e.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              aria-label=\"remove\"\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => handleChangeQuery()}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\nexport const TodoModal: React.FC = () => {\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [isProcessing, setIsProcesing] = useState(false);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n  const { removeTodo } = actions;\n\n  const handleRemoveCurrentTodo = () => dispatch(removeTodo());\n\n  useEffect(() => {\n    if (currentTodo) {\n      setIsProcesing(true);\n      getUser(currentTodo.userId)\n        .then(response => setCurrentUser(response))\n        .finally(() => setIsProcesing(false));\n    }\n  }, [currentTodo]);\n\n  return (\n    <div\n      className={classNames(\n        'modal',\n        { 'is-active': currentTodo },\n      )}\n      data-cy=\"modal\"\n    >\n      <div className=\"modal-background\" />\n\n      {isProcessing\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${currentTodo?.id}`}\n              </div>\n\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                aria-label=\"close\"\n                onClick={handleRemoveCurrentTodo}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {currentTodo?.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {!currentTodo?.completed\n                  ? <strong className=\"has-text-danger\">Planned</strong>\n                  : <strong className=\"has-text-success\">Done</strong>}\n\n                {' by '}\n                <a href={`mailto:${currentUser?.email}`}>{currentUser?.name}</a>\n              </p>\n            </div>\n          </div>\n        )}\n\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\n\nexport const App: React.FC = () => {\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              <TodoList />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <TodoModal />\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}